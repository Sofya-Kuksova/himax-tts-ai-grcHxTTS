// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHONEMESTABLE_PHONEMESTABLE_MAPPING_H_
#define FLATBUFFERS_GENERATED_PHONEMESTABLE_PHONEMESTABLE_MAPPING_H_

#include "flatbuffers/flatbuffers.h"

namespace PhonemesTable {
namespace Mapping {

struct KeyValue;
struct KeyValueBuilder;

struct Mapping;
struct MappingBuilder;

struct KeyValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef KeyValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const KeyValue *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct KeyValueBuilder {
  typedef KeyValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(KeyValue::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(KeyValue::VT_VALUE, value);
  }
  explicit KeyValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<KeyValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<KeyValue>(end);
    fbb_.Required(o, KeyValue::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<KeyValue> CreateKeyValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  KeyValueBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<KeyValue> CreateKeyValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<uint8_t> *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return PhonemesTable::Mapping::CreateKeyValue(
      _fbb,
      key__,
      value__);
}

struct Mapping FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MappingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<PhonemesTable::Mapping::KeyValue>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PhonemesTable::Mapping::KeyValue>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct MappingBuilder {
  typedef Mapping Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhonemesTable::Mapping::KeyValue>>> entries) {
    fbb_.AddOffset(Mapping::VT_ENTRIES, entries);
  }
  explicit MappingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Mapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mapping>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mapping> CreateMapping(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhonemesTable::Mapping::KeyValue>>> entries = 0) {
  MappingBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<Mapping> CreateMappingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<PhonemesTable::Mapping::KeyValue>> *entries = nullptr) {
  auto entries__ = entries ? _fbb.CreateVectorOfSortedTables<PhonemesTable::Mapping::KeyValue>(entries) : 0;
  return PhonemesTable::Mapping::CreateMapping(
      _fbb,
      entries__);
}

inline const PhonemesTable::Mapping::Mapping *GetMapping(const void *buf) {
  return flatbuffers::GetRoot<PhonemesTable::Mapping::Mapping>(buf);
}

inline const PhonemesTable::Mapping::Mapping *GetSizePrefixedMapping(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PhonemesTable::Mapping::Mapping>(buf);
}

inline bool VerifyMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PhonemesTable::Mapping::Mapping>(nullptr);
}

inline bool VerifySizePrefixedMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PhonemesTable::Mapping::Mapping>(nullptr);
}

inline void FinishMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PhonemesTable::Mapping::Mapping> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PhonemesTable::Mapping::Mapping> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Mapping
}  // namespace PhonemesTable

#endif  // FLATBUFFERS_GENERATED_PHONEMESTABLE_PHONEMESTABLE_MAPPING_H_
